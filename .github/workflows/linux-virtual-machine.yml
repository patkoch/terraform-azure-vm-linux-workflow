name: Deploy or Destroy Linux Virtual Machine

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy
  pull_request:
    branches:
      - main
      - 'feature/**'
  
jobs:

  pr-verification:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest

      - name: Update Terraform Variables - Admin Password
        run: |
          echo "virtual_machine_admin_password  = \"${{ secrets.VIRTUAL_MACHINE_ADMIN_PASSWORD }}\"" >> terraform.auto.tfvars
          echo "" >> terraform.auto.tfvars
      
      - name: Update Terraform Variables - Subscription ID
        run: |
          echo "subscription_id = \"${{ secrets.SUBSCRIPTION_ID }}\"" >> terraform.auto.tfvars
          echo "" >> terraform.auto.tfvars
      
      - name: Create Public SSH Key File
        run: |
          # Create public key file from GH secret
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > id_rsa.pub

      - name: Run TFLint
        run: |
          tflint --init
          tflint --format=compact

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  verification:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: Check if the storage account exists
        run: az storage account show --name stdemodevwesteu001 --resource-group azureworkshop-demo-rg
      
      - name: Verify Required Secrets
        run: |
          missing_secrets=()
          
          if [ -z "${{ secrets.CLIENT_ID }}" ]; then
            missing_secrets+=("CLIENT_ID")
          fi
          
          if [ -z "${{ secrets.SSH_PUBLIC_KEY }}" ]; then
            missing_secrets+=("SSH_PUBLIC_KEY")
          fi
          
          if [ -z "${{ secrets.SUBSCRIPTION_ID }}" ]; then
            missing_secrets+=("SUBSCRIPTION_ID")
          fi
          
          if [ -z "${{ secrets.TENANT_ID }}" ]; then
            missing_secrets+=("TENANT_ID")
          fi
          
          if [ -z "${{ secrets.VIRTUAL_MACHINE_ADMIN_PASSWORD }}" ]; then
            missing_secrets+=("VIRTUAL_MACHINE_ADMIN_PASSWORD")
          fi
          
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "❌ Missing required secrets: ${missing_secrets[*]}"
            echo "Please add the missing secrets in your repository settings:"
            echo "Settings -> Secrets and variables -> Actions -> New repository secret"
            exit 1
          fi
          
          echo "✅ All required secrets are configured"

  deploy:
    if: github.event.inputs.action == 'deploy'
    needs: verification
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: Update Terraform Variables - Admin Password
        run: |
          echo "virtual_machine_admin_password  = \"${{ secrets.VIRTUAL_MACHINE_ADMIN_PASSWORD }}\"" >> terraform.auto.tfvars
          echo "" >> terraform.auto.tfvars
      
      - name: Update Terraform Variables - Subscription ID
        run: |
          echo "subscription_id = \"${{ secrets.SUBSCRIPTION_ID }}\"" >> terraform.auto.tfvars
          echo "" >> terraform.auto.tfvars
      
      - name: Create Public SSH Key File
        run: |
          
          # Create public key file from secret
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > id_rsa.pub

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest

      - name: Run TFLint
        run: |
          tflint --init
          tflint --format=compact

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt 
        continue-on-error: false

      - name: Terraform Initialize 
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

  destroy:
    if: github.event.inputs.action == 'destroy'
    needs: verification
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Initialize 
        run: terraform init
      
      - name: Update Terraform Variables - Admin Password
        run: |
          echo "virtual_machine_admin_password  = \"${{ secrets.VIRTUAL_MACHINE_ADMIN_PASSWORD }}\"" >> terraform.auto.tfvars
          echo "" >> terraform.auto.tfvars
      
      - name: Update Terraform Variables - Subscription ID
        run: |
          echo "subscription_id = \"${{ secrets.SUBSCRIPTION_ID }}\"" >> terraform.auto.tfvars
          echo "" >> terraform.auto.tfvars
      
      - name: Create Public SSH Key File
        run: |
          
          # Create public key file from secret
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > id_rsa.pub

      - name: Terraform Destroy
        run: terraform destroy -auto-approve